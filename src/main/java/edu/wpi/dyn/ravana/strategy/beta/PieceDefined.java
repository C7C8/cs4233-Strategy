/*
 * Copyright (c) 2019 Christopher Myers
 *
 * This file is part of cs4233-strategy.
 *
 * cs4233-strategy is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * cs4233-strategy is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with cs4233-strategy.  If not, see <https://www.gnu.org/licenses/>.
 * ======
 *
 * This file was developed as part of CS 4233: Object Oriented Analysis &
 * Design, at Worcester Polytechnic Institute.
 */

package edu.wpi.dyn.ravana.strategy.beta;

import strategy.Piece;
import strategy.StrategyException;
import strategy.StrategyGame;

import static strategy.Piece.PieceColor.BLUE;
import static strategy.StrategyGame.MoveResult.STRIKE_BLUE;
import static strategy.StrategyGame.MoveResult.STRIKE_RED;

public abstract class PieceDefined implements Piece {

	protected PieceColor color;

	public PieceDefined(PieceColor color) {
		this.color = color;
	}

	public PieceColor getColor() {
		return color;
	}

	/**
	 * Move the piece.
	 * @param board Board to move on
	 * @param fr From row
	 * @param fc From column
	 * @param tr To row
	 * @param tc To column
	 * @return Result of move
	 * @throws StrategyException Thrown if move is invalid for any reason (e.g. out of bounds)
	 */
	public abstract StrategyGame.MoveResult move(Board board, int fr, int fc, int tr, int tc) throws StrategyException;

	/**
	 * Determine the outcome of a particular strike.
	 * @param target Targeted piece.
	 * @return Result of the strike!
	 */
	public abstract StrategyGame.MoveResult strike(Piece target);

	/**
	 * Dumb helper function to check that we're only moving in one direction at once
	 * @param fr From row
	 * @param fc From column
	 * @param tr To row
	 * @param tc To column
	 * @return Whether the move is non-diagonal
	 */
	protected static boolean isDiagonal(int fr, int fc, int tr, int tc) {
		return Math.abs(tc - fc) != 0 && Math.abs(tr - fr) != 0;
	}

	/**
	 * Helper class to store moves
	 */
	private static class Move {
		int fr;
		int fc;
		int tr;
		int tc;

		public Move(int fr, int fc, int tr, int tc) {
			this.fr = fr;
			this.fc = fc;
			this.tr = tr;
			this.tc = tc;
		}

		// Autogenerated
		@Override
		public boolean equals(Object o) {
			if (this == o) return true;
			if (o == null || getClass() != o.getClass()) return false;
			Move move = (Move) o;
			return fr == move.fr &&
					fc == move.fc &&
					tr == move.tr &&
					tc == move.tc;
		}
	}
	private Move last;
	private Move last2;

	/**
	 * Determine whether the piece would perform a back-and-forth move. Calling this function is equivalent to stating
	 * that the move is being made, UNLESS the result is TRUE.
	 * @param fr From row
	 * @param fc From column
	 * @param tr To row
	 * @param tc To column
	 * @return Whether the move is a repeat or not
	 */
	protected boolean moveRepetition(int fr, int fc, int tr, int tc) {
		Move move = new Move(fr, fc, tr, tc);
		if (move.equals(last2))
			return true;
		last2 = last;
		last = move;
		return false;
	}

	/**
	 * Tiny, dumb helper function to convert piece color + victory to the right strike return
	 * @return Strike result
	 */
	StrategyGame.MoveResult pieceVictory() {
		return color == BLUE ? STRIKE_BLUE : STRIKE_RED;
	}

	/**
	 * Tiny, dumb helper function to convert piece color + victory to the right strike return
	 * @return Strike result
	 */
	StrategyGame.MoveResult pieceLoss() {
		return color == BLUE ? STRIKE_RED : STRIKE_BLUE;
	}
}
